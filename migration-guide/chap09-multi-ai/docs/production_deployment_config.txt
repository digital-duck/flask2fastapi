# File: deployment/production/docker-compose.yml
# Production deployment configuration for FastAPI security system

version: '3.8'

services:
  # FastAPI Application
  fastapi-app:
    build:
      context: ../../
      dockerfile: deployment/Dockerfile
    image: fastapi-secure-app:latest
    container_name: fastapi-security-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://fastapi:${DB_PASSWORD}@postgres:5432/fastapi_security
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_PRIVATE_KEY_PATH=/app/secrets/jwt_private.pem
      - JWT_PUBLIC_KEY_PATH=/app/secrets/jwt_public.pem
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - vault
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-security
    restart: unless-stopped
    environment:
      - POSTGRES_DB=fastapi_security
      - POSTGRES_USER=fastapi
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - security-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fastapi -d fastapi_security"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-security
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # HashiCorp Vault for Secrets Management
  vault:
    image: vault:1.15
    container_name: vault-security
    restart: unless-stopped
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./vault-config.hcl:/vault/config/vault.hcl:ro
    ports:
      - "127.0.0.1:8200:8200"
    networks:
      - security-network
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: nginx-security
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - fastapi-app
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-security
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - security-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-security
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - security-network

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-security
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=security-logs
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "127.0.0.1:9200:9200"
    networks:
      - security-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana-security
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "127.0.0.1:5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - security-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash-security
    restart: unless-stopped
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config:/usr/share/logstash/config:ro
    ports:
      - "127.0.0.1:5044:5044"
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
    depends_on:
      - elasticsearch
    networks:
      - security-network

  # Filebeat for Log Shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: filebeat-security
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_logs:/var/log/nginx:ro
    depends_on:
      - logstash
    networks:
      - security-network

  # Security Monitoring with Wazuh
  wazuh-manager:
    image: wazuh/wazuh-manager:4.7.0
    container_name: wazuh-manager-security
    restart: unless-stopped
    environment:
      - INDEXER_URL=https://wazuh-indexer:9200
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD}
      - FILEBEAT_SSL_VERIFICATION_MODE=full
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.pem
      - SSL_CERTIFICATE=/etc/ssl/filebeat.pem
      - SSL_KEY=/etc/ssl/filebeat.key
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - filebeat_etc:/etc/filebeat
      - filebeat_var:/var/lib/filebeat
      - ./wazuh/ssl:/etc/ssl:ro
    ports:
      - "127.0.0.1:1514:1514"
      - "127.0.0.1:1515:1515"
      - "127.0.0.1:514:514/udp"
      - "127.0.0.1:55000:55000"
    networks:
      - security-network

networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  wazuh_api_configuration:
    driver: local
  wazuh_etc:
    driver: local
  wazuh_logs:
    driver: local
  wazuh_queue:
    driver: local
  wazuh_var_multigroups:
    driver: local
  wazuh_integrations:
    driver: local
  wazuh_active_response:
    driver: local
  wazuh_agentless:
    driver: local
  wazuh_wodles:
    driver: local
  filebeat_etc:
    driver: local
  filebeat_var:
    driver: local

---
# File: deployment/production/nginx.conf
# Nginx configuration for production security

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https:; frame-ancestors 'none';" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Real IP configuration for proxied requests
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Logging
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log security;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Upstream FastAPI application
    upstream fastapi_backend {
        server fastapi-app:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        
        # Security headers for HTTP
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        # Block common attack patterns
        location ~* \.(php|asp|aspx|jsp)$ {
            return 444;
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name your-domain.com;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # Client certificate verification (optional)
        # ssl_client_certificate /etc/nginx/ssl/ca.pem;
        # ssl_verify_client optional;

        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;

        # Security restrictions
        client_max_body_size 10M;
        client_header_timeout 10s;
        client_body_timeout 10s;
        send_timeout 10s;

        # Block common attack patterns
        location ~* \.(php|asp|aspx|jsp)$ {
            return 444;
        }

        location ~* /\.(?!well-known\/) {
            deny all;
        }

        location ~* \.(git|svn|hg|bzr)/ {
            deny all;
        }

        # Health check endpoint (no rate limiting)
        location /health {
            access_log off;
            proxy_pass http://fastapi_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API endpoints with stricter rate limiting
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            # Additional security for API
            if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|OPTIONS)$) {
                return 405;
            }

            proxy_pass http://fastapi_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Client-Certificate $ssl_client_escaped_cert;
            
            # Proxy timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # Authentication endpoints with very strict rate limiting
        location ~ ^/(auth|login|register)/ {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://fastapi_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static files (if any)
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Security for static files
            location ~* \.(js|css)$ {
                add_header Content-Security-Policy "default-src 'self'";
            }
        }

        # Documentation (restrict access)
        location /docs {
            # Restrict documentation access to specific IPs
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://fastapi_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default location
        location / {
            proxy_pass http://fastapi_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Proxy timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 '{"error": "Not Found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"error": "Internal Server Error"}';
            add_header Content-Type application/json;
        }
    }
}

---
# File: deployment/production/prometheus.yml
# Prometheus configuration for security monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "security_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # FastAPI application metrics
  - job_name: 'fastapi-security'
    static_configs:
      - targets: ['fastapi-app:8000']
    metrics_path: /metrics
    scrape_interval: 5s
    scrape_timeout: 5s

  # Node exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  # PostgreSQL metrics
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']

  # Redis metrics
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']

  # Nginx metrics
  - job_name: 'nginx-exporter'
    static_configs:
      - targets: ['nginx-exporter:9113']

  # Security-specific metrics
  - job_name: 'security-metrics'
    static_configs:
      - targets: ['fastapi-app:8000']
    metrics_path: /security/metrics
    scrape_interval: 10s

---
# File: deployment/production/security_rules.yml
# Prometheus alerting rules for security monitoring

groups:
  - name: security_alerts
    rules:
      # High risk score events
      - alert: HighRiskSecurityEvent
        expr: increase(security_events_total{risk_level="high"}[5m]) > 10
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "High number of high-risk security events detected"
          description: "{{ $value }} high-risk security events in the last 5 minutes"

      # Critical security events
      - alert: CriticalSecurityEvent
        expr: increase(security_events_total{risk_level="critical"}[1m]) > 0
        for: 0m
        labels:
          severity: critical
        annotations:
          summary: "Critical security event detected"
          description: "Critical security event detected: {{ $labels.event_type }}"

      # Authentication failures
      - alert: HighAuthenticationFailures
        expr: increase(auth_failures_total[5m]) > 50
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High number of authentication failures"
          description: "{{ $value }} authentication failures in the last 5 minutes"

      # Blocked requests
      - alert: HighBlockedRequests
        expr: rate(blocked_requests_total[5m]) > 10
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "High rate of blocked requests"
          description: "{{ $value }} requests per second being blocked"

      # System resource alerts
      - alert: HighCPUUsage
        expr: 100 - (avg(rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is above 80% for more than 5 minutes"

      - alert: HighMemoryUsage
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is above 85% for more than 5 minutes"

      # Database connection alerts
      - alert: DatabaseConnectionFailures
        expr: increase(database_connection_failures_total[5m]) > 5
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "Database connection failures detected"
          description: "{{ $value }} database connection failures in the last 5 minutes"

      # Application health
      - alert: ApplicationDown
        expr: up{job="fastapi-security"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "FastAPI application is down"
          description: "FastAPI security application has been down for more than 1 minute"

---
# File: deployment/production/.env.example
# Environment variables for production deployment

# Database Configuration
DB_PASSWORD=your_secure_database_password_here
DATABASE_URL=postgresql+asyncpg://fastapi:${DB_PASSWORD}@postgres:5432/fastapi_security

# Redis Configuration
REDIS_PASSWORD=your_secure_redis_password_here
REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0

# Application Secrets
SECRET_KEY=your_256_bit_secret_key_here_use_secrets_token_urlsafe_32
JWT_ISSUER=your-company.com
JWT_AUDIENCE=fastapi-security-api

# Vault Configuration
VAULT_ROOT_TOKEN=your_vault_root_token_here
VAULT_ADDR=http://vault:8200

# Monitoring
GRAFANA_ADMIN_PASSWORD=your_secure_grafana_password_here
GRAFANA_SECRET_KEY=your_grafana_secret_key_here
WAZUH_INDEXER_PASSWORD=your_wazuh_indexer_password_here

# SSL Configuration
SSL_CERT_PATH=/app/ssl/cert.pem
SSL_KEY_PATH=/app/ssl/key.pem

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json

# Security Configuration
MAX_REQUEST_SIZE=10485760  # 10MB
RATE_LIMIT_PER_MINUTE=60
SESSION_TIMEOUT_HOURS=24
JWT_EXPIRY_MINUTES=30
REFRESH_TOKEN_EXPIRY_DAYS=30

# CORS Configuration
ALLOWED_ORIGINS=https://your-frontend-domain.com,https://admin.your-domain.com
ALLOWED_METHODS=GET,POST,PUT,DELETE,PATCH,OPTIONS
ALLOWED_HEADERS=*

# External Services
SMTP_HOST=smtp.your-provider.com
SMTP_PORT=587
SMTP_USERNAME=your_smtp_username
SMTP_PASSWORD=your_smtp_password

# Geographic Restrictions
BLOCKED_COUNTRIES=CN,RU,KP  # ISO country codes
ALLOWED_IP_RANGES=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16

# Compliance Settings
GDPR_ENABLED=true
DATA_RETENTION_DAYS=90
AUDIT_LOG_RETENTION_DAYS=2555  # 7 years
REQUIRE_CONSENT=marketing,analytics,profiling

# Performance Settings
WORKERS=4
MAX_CONNECTIONS=1000
KEEPALIVE_TIMEOUT=5
GRACEFUL_TIMEOUT=30